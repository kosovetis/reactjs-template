// src/Home.tsx
import { useState } from "react";
import { blocks } from "./phrases";
import Rank from "./Rank";
const idToText = (id: string) => {
  for (const block of blocks) {
    const found = block.find(f => f.id === id);
    if (found) return found.text;
  }
  return id; // fallback
};
export default function Home() {
  /* --------------------- —Å–æ—Å—Ç–æ—è–Ω–∏—è --------------------- */
  const [blockIndex, setBlockIndex] = useState(0);     // –∫–∞–∫–æ–π –∏–∑ 7-–º–∏ –±–ª–æ–∫–æ–≤
  const [selected, setSelected]     = useState<string[]>([]);
  const [showRank, setShowRank]     = useState(false); // false = —ç–∫—Ä–∞–Ω —á–µ–∫-–±–æ–∫—Å–æ–≤

  /* -------------------- –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ ------------------ */
  const toggle = (id: string) => {
    setSelected(prev =>
      prev.includes(id)
        ? prev.filter(x => x !== id)                   // —Å–Ω—è—Ç—å –≥–∞–ª–æ—á–∫—É
        : prev.length < 5 ? [...prev, id] : prev       // –¥–æ–±–∞–≤–∏—Ç—å, –Ω–æ ‚â§5
    );
  };

  /* -------------------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–ì–æ—Ç–æ–≤–æ¬ª –∏–∑ Rank ----- */
  const handleRankDone = (order: string[]) => {
    // –∑–¥–µ—Å—å –ø–æ—Ç–æ–º Telegram.WebApp.sendData(...)
    console.log("–∏—Ç–æ–≥–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫:", order);

    // üëâ –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –±–ª–æ–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π
    if (blockIndex < blocks.length - 1) {
      setBlockIndex(blockIndex + 1);
      setSelected([]);
      setShowRank(false);
    } else {
      alert("–í—Å–µ –±–ª–æ–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, —Å–ø–∞—Å–∏–±–æ!");
    }
  };

  /* --------------------- —ç–∫—Ä–∞–Ω —Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏—è ------------ */
  if (showRank) {
    return (
  <Rank
    list={selected}
    idToText={idToText}     // ‚¨ÖÔ∏è –ø–µ—Ä–µ–¥–∞—ë–º
    onDone={handleRankDone}
  />
);
  }

  /* --------------------- —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ 5 —Ñ—Ä–∞–∑ ------------ */
  return (
    <div className="p-4 flex flex-col space-y-4 max-w-xl mx-auto">
      <h1 className="text-2xl font-bold">–í—ã–±–µ—Ä–∏—Ç–µ 5 —Ñ—Ä–∞–∑</h1>

      {/* —Å–ø–∏—Å–æ–∫ —Ñ—Ä–∞–∑ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞ —Å—Ç–æ–ª–±–∏–∫–æ–º */}
      <div>
        {blocks[blockIndex].map(({ id, text }) => (
          <label
            key={id}
            style={{ display: "block", marginBottom: "8px" }}
          >
            <input
              type="checkbox"
              checked={selected.includes(id)}
              onChange={() => toggle(id)}
              style={{ marginRight: "6px" }}
            />
            {text}
          </label>
        ))}
      </div>

      {/* –∫–Ω–æ–ø–∫–∞ ¬´–î–∞–ª—å—à–µ¬ª */}
      <button
        disabled={selected.length !== 5}
        onClick={() => setShowRank(true)}
        style={{
          padding: "8px 16px",
          background: selected.length === 5 ? "#2563eb" : "#9ca3af",
          color: "white",
          borderRadius: "4px",
          cursor: selected.length === 5 ? "pointer" : "not-allowed",
          border: "none"
        }}
      >
        {blockIndex === blocks.length - 1 ? "–ì–æ—Ç–æ–≤–æ" : "–î–∞–ª—å—à–µ"}
      </button>
    </div>
  );
}
